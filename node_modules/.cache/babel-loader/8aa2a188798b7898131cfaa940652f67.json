{"ast":null,"code":"import Actions from './actions';\nconst initState = {\n  identity: '',\n  isRoomHost: false,\n  connectOnlyWithAudio: false,\n  roomId: null,\n  showOverlay: true,\n  participants: [],\n  messages: [],\n  activeConversation: null,\n  directChatHistory: [],\n  socketId: null\n};\n\nconst reducer = function () {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initState;\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case Actions.SET_IS_ROOM_HOST:\n      return { ...state,\n        isRoomHost: action.isRoomHost\n      };\n\n    case Actions.SET_CONNECT_ONLY_WITH_AUDIO:\n      return { ...state,\n        connectOnlyWithAudio: action.onlyWithAudio\n      };\n\n    case Actions.SET_ROOM_ID:\n      return { ...state,\n        roomId: action.roomId\n      };\n\n    case Actions.SET_IDENTITY:\n      return { ...state,\n        identity: action.identity\n      };\n\n    case Actions.SET_SHOW_OVERLAY:\n      return { ...state,\n        showOverlay: action.showOverlay\n      };\n\n    case Actions.SET_PARTICIPANTS:\n      return { ...state,\n        participants: action.participants\n      };\n\n    case Actions.SET_MESSAGES:\n      return { ...state,\n        messages: action.messages\n      };\n\n    case Actions.SET_ACTIVE_CONVERSATION:\n      return { ...state,\n        activeConversation: action.activeConversation\n      };\n\n    case Actions.SET_DIRECT_CHAT_HISTORY:\n      return { ...state,\n        directChatHistory: action.directChatHistory\n      };\n\n    case Actions.SET_SOCKET_ID:\n      return { ...state,\n        socketId: action.socketId\n      };\n\n    default:\n      return state;\n  }\n};\n\nexport default reducer;","map":{"version":3,"sources":["E:/onedrive/桌面/前端学习/webRTC/webRTC/myapp/src/store/reducer.js"],"names":["Actions","initState","identity","isRoomHost","connectOnlyWithAudio","roomId","showOverlay","participants","messages","activeConversation","directChatHistory","socketId","reducer","state","action","type","SET_IS_ROOM_HOST","SET_CONNECT_ONLY_WITH_AUDIO","onlyWithAudio","SET_ROOM_ID","SET_IDENTITY","SET_SHOW_OVERLAY","SET_PARTICIPANTS","SET_MESSAGES","SET_ACTIVE_CONVERSATION","SET_DIRECT_CHAT_HISTORY","SET_SOCKET_ID"],"mappings":"AAAA,OAAOA,OAAP,MAAoB,WAApB;AACA,MAAMC,SAAS,GAAG;AAChBC,EAAAA,QAAQ,EAAE,EADM;AAEhBC,EAAAA,UAAU,EAAE,KAFI;AAGhBC,EAAAA,oBAAoB,EAAE,KAHN;AAIhBC,EAAAA,MAAM,EAAE,IAJQ;AAKhBC,EAAAA,WAAW,EAAE,IALG;AAMhBC,EAAAA,YAAY,EAAE,EANE;AAOhBC,EAAAA,QAAQ,EAAE,EAPM;AAQhBC,EAAAA,kBAAkB,EAAE,IARJ;AAShBC,EAAAA,iBAAiB,EAAE,EATH;AAUhBC,EAAAA,QAAQ,EAAE;AAVM,CAAlB;;AAaA,MAAMC,OAAO,GAAG,YAA+B;AAAA,MAA9BC,KAA8B,uEAAtBZ,SAAsB;AAAA,MAAXa,MAAW;;AAC7C,UAAQA,MAAM,CAACC,IAAf;AACE,SAAKf,OAAO,CAACgB,gBAAb;AACE,aAAO,EACL,GAAGH,KADE;AAELV,QAAAA,UAAU,EAAEW,MAAM,CAACX;AAFd,OAAP;;AAKF,SAAKH,OAAO,CAACiB,2BAAb;AACE,aAAO,EACL,GAAGJ,KADE;AAELT,QAAAA,oBAAoB,EAAEU,MAAM,CAACI;AAFxB,OAAP;;AAKF,SAAKlB,OAAO,CAACmB,WAAb;AACE,aAAO,EACL,GAAGN,KADE;AAELR,QAAAA,MAAM,EAAES,MAAM,CAACT;AAFV,OAAP;;AAKF,SAAKL,OAAO,CAACoB,YAAb;AACE,aAAO,EACL,GAAGP,KADE;AAELX,QAAAA,QAAQ,EAAEY,MAAM,CAACZ;AAFZ,OAAP;;AAKF,SAAKF,OAAO,CAACqB,gBAAb;AACE,aAAO,EACL,GAAGR,KADE;AAELP,QAAAA,WAAW,EAAEQ,MAAM,CAACR;AAFf,OAAP;;AAKF,SAAKN,OAAO,CAACsB,gBAAb;AACE,aAAO,EACL,GAAGT,KADE;AAELN,QAAAA,YAAY,EAAEO,MAAM,CAACP;AAFhB,OAAP;;AAKF,SAAKP,OAAO,CAACuB,YAAb;AACE,aAAO,EACL,GAAGV,KADE;AAELL,QAAAA,QAAQ,EAAEM,MAAM,CAACN;AAFZ,OAAP;;AAIF,SAAKR,OAAO,CAACwB,uBAAb;AACE,aAAO,EACL,GAAGX,KADE;AAELJ,QAAAA,kBAAkB,EAAEK,MAAM,CAACL;AAFtB,OAAP;;AAIF,SAAKT,OAAO,CAACyB,uBAAb;AACE,aAAO,EACL,GAAGZ,KADE;AAELH,QAAAA,iBAAiB,EAAEI,MAAM,CAACJ;AAFrB,OAAP;;AAIF,SAAKV,OAAO,CAAC0B,aAAb;AACE,aAAO,EACL,GAAGb,KADE;AAELF,QAAAA,QAAQ,EAAEG,MAAM,CAACH;AAFZ,OAAP;;AAKF;AACE,aAAOE,KAAP;AA3DJ;AA6DD,CA9DD;;AAgEA,eAAeD,OAAf","sourcesContent":["import Actions from './actions';\nconst initState = {\n  identity: '',\n  isRoomHost: false,\n  connectOnlyWithAudio: false,\n  roomId: null,\n  showOverlay: true,\n  participants: [],\n  messages: [],\n  activeConversation: null,\n  directChatHistory: [],\n  socketId: null,\n};\n\nconst reducer = (state = initState, action) => {\n  switch (action.type) {\n    case Actions.SET_IS_ROOM_HOST:\n      return {\n        ...state,\n        isRoomHost: action.isRoomHost,\n      };\n\n    case Actions.SET_CONNECT_ONLY_WITH_AUDIO:\n      return {\n        ...state,\n        connectOnlyWithAudio: action.onlyWithAudio,\n      };\n\n    case Actions.SET_ROOM_ID:\n      return {\n        ...state,\n        roomId: action.roomId,\n      };\n\n    case Actions.SET_IDENTITY:\n      return {\n        ...state,\n        identity: action.identity,\n      };\n\n    case Actions.SET_SHOW_OVERLAY:\n      return {\n        ...state,\n        showOverlay: action.showOverlay,\n      };\n\n    case Actions.SET_PARTICIPANTS:\n      return {\n        ...state,\n        participants: action.participants,\n      };\n\n    case Actions.SET_MESSAGES:\n      return {\n        ...state,\n        messages: action.messages,\n      };\n    case Actions.SET_ACTIVE_CONVERSATION:\n      return {\n        ...state,\n        activeConversation: action.activeConversation,\n      };\n    case Actions.SET_DIRECT_CHAT_HISTORY:\n      return {\n        ...state,\n        directChatHistory: action.directChatHistory,\n      };\n    case Actions.SET_SOCKET_ID:\n      return {\n        ...state,\n        socketId: action.socketId,\n      };\n\n    default:\n      return state;\n  }\n};\n\nexport default reducer;\n"]},"metadata":{},"sourceType":"module"}
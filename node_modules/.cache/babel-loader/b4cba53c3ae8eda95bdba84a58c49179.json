{"ast":null,"code":"var _jsxFileName = \"E:\\\\onedrive\\\\\\u684C\\u9762\\\\\\u524D\\u7AEF\\u5B66\\u4E60\\\\webRTC\\\\webRTC\\\\myapp\\\\src\\\\pages\\\\RoomPage\\\\VideoSection\\\\SwitchToScreenSharingButton.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport SwitchImg from \"../../../resources/images/switchToScreenSharing.svg\";\nimport LocalScreenSharingPreview from './LocalScreenSharingPreview';\nimport * as webRTCHandler from '../../../utils/webRTCHandler';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst constrains = {\n  audio: false,\n  video: true\n};\n\nconst SwitchToScreenSharingButton = () => {\n  _s();\n\n  const [isScreenSharingActive, setIsScreenSharingActive] = useState(false);\n  const [screenSharingStream, setScreenSharingStream] = useState(null);\n\n  const handleScreenShareToggle = async () => {\n    if (!isScreenSharingActive) {\n      let stream = null;\n\n      try {\n        //获取本地要共享的媒体资源\n        stream = await navigator.mediaDevices.getDisplayMedia(constrains);\n      } catch (error) {\n        console.log('获取共享屏幕的媒体流失败');\n      }\n\n      if (stream) {\n        setScreenSharingStream(stream);\n        webRTCHandler.toggleScreenShare(isScreenSharingActive, stream);\n        setIsScreenSharingActive(true);\n      }\n    } else {\n      webRTCHandler.toggleScreenShare(isScreenSharingActive);\n      setIsScreenSharingActive(false); //停止共享屏幕\n\n      screenSharingStream.getTracks().forEach(track => track.stop());\n      setScreenSharingStream(null);\n    } // setIsScreenSharingActive(!isScreenSharingActive);\n\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"video_button_container\",\n      children: /*#__PURE__*/_jsxDEV(\"img\", {\n        src: SwitchImg,\n        onClick: handleScreenShareToggle,\n        className: \"video_button_image\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 7\n    }, this), isScreenSharingActive && /*#__PURE__*/_jsxDEV(LocalScreenSharingPreview, {\n      stream: screenSharingStream\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true);\n};\n\n_s(SwitchToScreenSharingButton, \"EDNK554F9kzm0rl1iVOi1mTRTYk=\");\n\n_c = SwitchToScreenSharingButton;\nexport default SwitchToScreenSharingButton;\n\nvar _c;\n\n$RefreshReg$(_c, \"SwitchToScreenSharingButton\");","map":{"version":3,"sources":["E:/onedrive/桌面/前端学习/webRTC/webRTC/myapp/src/pages/RoomPage/VideoSection/SwitchToScreenSharingButton.js"],"names":["React","useState","LocalScreenSharingPreview","webRTCHandler","constrains","audio","video","SwitchToScreenSharingButton","isScreenSharingActive","setIsScreenSharingActive","screenSharingStream","setScreenSharingStream","handleScreenShareToggle","stream","navigator","mediaDevices","getDisplayMedia","error","console","log","toggleScreenShare","getTracks","forEach","track","stop","SwitchImg"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;;AAEA,OAAOC,yBAAP,MAAsC,6BAAtC;AACA,OAAO,KAAKC,aAAZ,MAA+B,8BAA/B;;;AACA,MAAMC,UAAU,GAAG;AACjBC,EAAAA,KAAK,EAAE,KADU;AAEjBC,EAAAA,KAAK,EAAE;AAFU,CAAnB;;AAKA,MAAMC,2BAA2B,GAAG,MAAM;AAAA;;AACxC,QAAM,CAACC,qBAAD,EAAwBC,wBAAxB,IAAoDR,QAAQ,CAAC,KAAD,CAAlE;AACA,QAAM,CAACS,mBAAD,EAAsBC,sBAAtB,IAAgDV,QAAQ,CAAC,IAAD,CAA9D;;AACA,QAAMW,uBAAuB,GAAG,YAAY;AAC1C,QAAI,CAACJ,qBAAL,EAA4B;AAC1B,UAAIK,MAAM,GAAG,IAAb;;AACA,UAAI;AACF;AACAA,QAAAA,MAAM,GAAG,MAAMC,SAAS,CAACC,YAAV,CAAuBC,eAAvB,CAAuCZ,UAAvC,CAAf;AACD,OAHD,CAGE,OAAOa,KAAP,EAAc;AACdC,QAAAA,OAAO,CAACC,GAAR,CAAY,cAAZ;AACD;;AACD,UAAIN,MAAJ,EAAY;AACVF,QAAAA,sBAAsB,CAACE,MAAD,CAAtB;AACAV,QAAAA,aAAa,CAACiB,iBAAd,CAAgCZ,qBAAhC,EAAuDK,MAAvD;AACAJ,QAAAA,wBAAwB,CAAC,IAAD,CAAxB;AACD;AACF,KAbD,MAaO;AACLN,MAAAA,aAAa,CAACiB,iBAAd,CAAgCZ,qBAAhC;AACAC,MAAAA,wBAAwB,CAAC,KAAD,CAAxB,CAFK,CAGL;;AACAC,MAAAA,mBAAmB,CAACW,SAApB,GAAgCC,OAAhC,CAAyCC,KAAD,IAAWA,KAAK,CAACC,IAAN,EAAnD;AACAb,MAAAA,sBAAsB,CAAC,IAAD,CAAtB;AACD,KApByC,CAsB1C;;AACD,GAvBD;;AAwBA,sBACE;AAAA,4BACE;AAAK,MAAA,SAAS,EAAC,wBAAf;AAAA,6BACE;AACE,QAAA,GAAG,EAAEc,SADP;AAEE,QAAA,OAAO,EAAEb,uBAFX;AAGE,QAAA,SAAS,EAAC;AAHZ;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,YADF,EAQGJ,qBAAqB,iBACpB,QAAC,yBAAD;AAA2B,MAAA,MAAM,EAAEE;AAAnC;AAAA;AAAA;AAAA;AAAA,YATJ;AAAA,kBADF;AAcD,CAzCD;;GAAMH,2B;;KAAAA,2B;AA2CN,eAAeA,2BAAf","sourcesContent":["import React, { useState } from 'react';\nimport SwitchImg from '../../../resources/images/switchToScreenSharing.svg';\nimport LocalScreenSharingPreview from './LocalScreenSharingPreview';\nimport * as webRTCHandler from '../../../utils/webRTCHandler';\nconst constrains = {\n  audio: false,\n  video: true,\n};\n\nconst SwitchToScreenSharingButton = () => {\n  const [isScreenSharingActive, setIsScreenSharingActive] = useState(false);\n  const [screenSharingStream, setScreenSharingStream] = useState(null);\n  const handleScreenShareToggle = async () => {\n    if (!isScreenSharingActive) {\n      let stream = null;\n      try {\n        //获取本地要共享的媒体资源\n        stream = await navigator.mediaDevices.getDisplayMedia(constrains);\n      } catch (error) {\n        console.log('获取共享屏幕的媒体流失败');\n      }\n      if (stream) {\n        setScreenSharingStream(stream);\n        webRTCHandler.toggleScreenShare(isScreenSharingActive, stream);\n        setIsScreenSharingActive(true);\n      }\n    } else {\n      webRTCHandler.toggleScreenShare(isScreenSharingActive);\n      setIsScreenSharingActive(false);\n      //停止共享屏幕\n      screenSharingStream.getTracks().forEach((track) => track.stop());\n      setScreenSharingStream(null);\n    }\n\n    // setIsScreenSharingActive(!isScreenSharingActive);\n  };\n  return (\n    <>\n      <div className='video_button_container'>\n        <img\n          src={SwitchImg}\n          onClick={handleScreenShareToggle}\n          className='video_button_image'\n        />\n      </div>\n      {isScreenSharingActive && (\n        <LocalScreenSharingPreview stream={screenSharingStream} />\n      )}\n    </>\n  );\n};\n\nexport default SwitchToScreenSharingButton;\n"]},"metadata":{},"sourceType":"module"}
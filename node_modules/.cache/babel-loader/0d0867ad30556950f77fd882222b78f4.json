{"ast":null,"code":"import store from '../store/store';\nimport { setShowOverlay, setMessages } from '../store/actions';\nimport Peer from 'simple-peer';\nimport * as wss from './wss'; //指定请求的媒体类型和相对应的参数。\n\nconst defaultConstraints = {\n  audio: true,\n  video: {\n    width: '480',\n    height: '360'\n  }\n}; //仅开启音频链接\n\nconst onlyAudioConstraints = {\n  audio: true,\n  video: false\n};\nlet localStream; //获取本地预览及初始化房间连接\n\nexport const getLocalPreviewAndInitRoomConnection = async function (isRoomHost, identity) {\n  let roomId = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n  let onlyAudio = arguments.length > 3 ? arguments[3] : undefined;\n  //判断是开启音频还是音视频\n  const constrains = onlyAudio ? onlyAudioConstraints : defaultConstraints; //采集本地音视频流（获取媒体输入的访问权限）\n\n  navigator.mediaDevices.getUserMedia(constrains).then(stream => {\n    //   console.log('成功获取本地媒体流');\n    localStream = stream; //预览本地视频\n\n    showLocalVideoPreview(localStream); //派发action隐藏加载动画\n\n    store.dispatch(setShowOverlay(false)); //初始化房间连接\n\n    isRoomHost ? wss.createNewRoom(identity, onlyAudio) : wss.joinRoom(roomId, identity, onlyAudio);\n  }).catch(error => {\n    console.log('无法获取本地媒体流！');\n    console.log(error);\n  });\n};\nlet peers = {};\nlet streams = []; //配置STUN服务器\n\nconst getConfiguration = () => {\n  return {\n    iceServers: [{\n      urls: 'stun:stun1.l.google.com:19302'\n    }]\n  };\n};\n\nconst messageChannel = 'messager'; //准备webRTC连接\n\nexport const prepareNewPeerConnection = (connUserSocketId, isInitiator) => {\n  const configuration = getConfiguration(); //实例化对等连接对象\n\n  peers[connUserSocketId] = new Peer({\n    initiator: isInitiator,\n    config: configuration,\n    stream: localStream,\n    channelName: messageChannel\n  }); //信令数据传递\n\n  peers[connUserSocketId].on('signal', data => {\n    //==>peer1.on('signal', data)\n    //data - webrtc offer, answer, or ice candidate\n    const signalData = {\n      signal: data,\n      connUserSocketId: connUserSocketId\n    };\n    wss.signalPeerData(signalData);\n  }); //获取媒体流stream\n\n  peers[connUserSocketId].on('stream', stream => {\n    console.log('成功获取远程Stream'); //显示接收的stream媒体流\n\n    addStream(stream, connUserSocketId);\n    streams = [...streams, stream];\n  }); //data数据通道\n\n  peers[connUserSocketId].on('data', data => {\n    const messageData = JSON.parse(data);\n    appendNewMessage(messageData);\n  });\n};\nexport const handleSignalingData = data => {\n  //将信令数据添加到对等连接中\n  peers[data.connUserSocketId].signal(data.signal); //==> peer2.signal(data)\n};\nexport const removePeerConnection = data => {\n  const {\n    socketId\n  } = data;\n  const videoContainer = document.getElementById(socketId);\n  const videoElement = document.getElementById(`${socketId}-video`);\n\n  if (videoContainer && videoElement) {\n    const tracks = videoElement.srcObject.getTracks();\n    tracks.forEach(track => track.stop());\n    videoElement.srcObject = null;\n    videoContainer.removeChild(videoElement);\n    videoContainer.parentNode.removeChild(videoContainer);\n\n    if (peers[socketId]) {\n      peers[socketId].destroy();\n    }\n\n    delete peers[socketId];\n  }\n}; /////////////////////////Video UI ///////////////////////////////////////\n//显示本地视频\n\nconst showLocalVideoPreview = stream => {\n  const videosContainer = document.getElementById('videos_portal');\n  videosContainer.classList.add('videos_portal_styles');\n  const videoContainer = document.createElement('div');\n  videoContainer.classList.add('video_track_container');\n  const videoElement = document.createElement('video');\n  videoElement.autoplay = true;\n  videoElement.muted = true;\n  videoElement.srcObject = stream; //onloadedmetadata在指定视频/音频（audio/video）的元数据加载后触发。\n\n  videoElement.onloadedmetadata = () => {\n    videoElement.play();\n  };\n\n  videoContainer.appendChild(videoElement); //仅开启音频的样式\n\n  if (store.getState().connectOnlyWithAudio) {\n    videoContainer.appendChild(onlyAudioLabel());\n  }\n\n  videosContainer.appendChild(videoContainer);\n}; //添加接收的stream媒体流并进行显示\n\n\nconst addStream = (stream, connUserSocketId) => {\n  //使用js创建容器展示视频\n  const videosContainer = document.getElementById('videos_portal');\n  const videoContainer = document.createElement('div');\n  videoContainer.id = connUserSocketId;\n  videoContainer.classList.add('video_track_container');\n  const videoElement = document.createElement('video');\n  videoElement.autoplay = true;\n  videoElement.muted = true;\n  videoElement.srcObject = stream;\n  videoElement.id = `${connUserSocketId}-video`; //onloadedmetadata在指定视频/音频（audio/video）的元数据加载后触发。\n\n  videoElement.onloadedmetadata = () => {\n    videoElement.play();\n  }; //放大/缩小视频信息\n\n\n  videoElement.addEventListener('click', () => {\n    if (videoElement.classList.contains('full_screen')) {\n      videoElement.classList.remove('full_screen');\n    } else {\n      videoElement.classList.add('full_screen');\n    }\n  });\n  videoContainer.appendChild(videoElement); //判断哪些用户是仅开启音频\n\n  const participants = store.getState().participants;\n  const participant = participants.find(p => p.socketId === connUserSocketId);\n\n  if (participant === null || participant === void 0 ? void 0 : participant.onlyAudio) {\n    videoContainer.appendChild(onlyAudioLabel(participant.identity));\n  } else {\n    videoContainer.style.position = 'static';\n  }\n\n  videosContainer.appendChild(videoContainer);\n}; //仅开启音频链接的样式效果\n\n\nconst onlyAudioLabel = function () {\n  let identity = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n  const labelContainer = document.createElement('div');\n  labelContainer.classList.add('label_only_audio_container');\n  const label = document.createElement('p');\n  label.classList.add('label_only_audio_text');\n  label.innerHTML = `${identity}仅开启音频连接`;\n  labelContainer.appendChild(label);\n  return labelContainer;\n}; /////////////////////////button logic ///////////////////////////////////////\n\n\nexport const toggleMic = isMuted => {\n  //getAudioTracks - 返回可用的音频轨道\n  //enabled - 获取或设置轨道是否激活 (true|false)\n  localStream.getAudioTracks()[0].enabled = isMuted ? true : false;\n};\nexport const toggleCamera = isDisabled => {\n  localStream.getVideoTracks()[0].enabled = isDisabled ? true : false;\n};\nexport const toggleScreenShare = function (isScreenSharingActive) {\n  let screenSharingStream = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n\n  if (isScreenSharingActive) {\n    //展示本地的媒体流\n    switchVideoTracks(localStream);\n  } else {\n    //展示共享屏幕媒体流\n    switchVideoTracks(screenSharingStream);\n  }\n};\n\nconst switchVideoTracks = stream => {\n  //遍历所有对等连接对象\n  for (let socket_id in peers) {\n    for (let index in peers[socket_id].streams[0].getTracks()) {\n      for (let index2 in stream.getTracks()) {\n        //kind属性规定轨道的种类（eg:audio,video）\n        if (peers[socket_id].streams[0].getTracks()[index].kind === stream.getTracks()[index2].kind) {\n          peers[socket_id].replaceTrack(peers[socket_id].streams[0].getTracks()[index], stream.getTracks()[index2], peers[socket_id].streams[0]);\n        }\n      }\n    }\n  }\n}; /////////////////////////Messages ///////////////////////////////////////\n\n\nconst appendNewMessage = messageData => {\n  //同步到store进行保存\n  const messages = store.getState().messages;\n  store.dispatch(setMessages([...messages, messageData]));\n}; //通过data通道发送聊天信息\n\n\nexport const sendMessageUsingDataChannel = messageContent => {\n  //本地创建的聊天信息\n  const identity = store.getState().identity;\n  const localMessageData = {\n    content: messageContent,\n    identity: identity,\n    messageCreatedByMe: true\n  }; //将本地发送的聊天信息存储到store\n\n  appendNewMessage(localMessageData); //聊天信息发送给远程webRTC对等方\n\n  const messageData = {\n    content: messageContent,\n    identity: identity\n  };\n  const stringifiedMessageData = JSON.stringify(messageData);\n\n  for (let socket_id in peers) {\n    peers[socket_id].send(stringifiedMessageData);\n  }\n};","map":{"version":3,"sources":["E:/onedrive/桌面/前端学习/webRTC/webRTC/myapp/src/utils/webRTCHandler.js"],"names":["store","setShowOverlay","setMessages","Peer","wss","defaultConstraints","audio","video","width","height","onlyAudioConstraints","localStream","getLocalPreviewAndInitRoomConnection","isRoomHost","identity","roomId","onlyAudio","constrains","navigator","mediaDevices","getUserMedia","then","stream","showLocalVideoPreview","dispatch","createNewRoom","joinRoom","catch","error","console","log","peers","streams","getConfiguration","iceServers","urls","messageChannel","prepareNewPeerConnection","connUserSocketId","isInitiator","configuration","initiator","config","channelName","on","data","signalData","signal","signalPeerData","addStream","messageData","JSON","parse","appendNewMessage","handleSignalingData","removePeerConnection","socketId","videoContainer","document","getElementById","videoElement","tracks","srcObject","getTracks","forEach","track","stop","removeChild","parentNode","destroy","videosContainer","classList","add","createElement","autoplay","muted","onloadedmetadata","play","appendChild","getState","connectOnlyWithAudio","onlyAudioLabel","id","addEventListener","contains","remove","participants","participant","find","p","style","position","labelContainer","label","innerHTML","toggleMic","isMuted","getAudioTracks","enabled","toggleCamera","isDisabled","getVideoTracks","toggleScreenShare","isScreenSharingActive","screenSharingStream","switchVideoTracks","socket_id","index","index2","kind","replaceTrack","messages","sendMessageUsingDataChannel","messageContent","localMessageData","content","messageCreatedByMe","stringifiedMessageData","stringify","send"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,gBAAlB;AACA,SAASC,cAAT,EAAyBC,WAAzB,QAA4C,kBAA5C;AACA,OAAOC,IAAP,MAAiB,aAAjB;AACA,OAAO,KAAKC,GAAZ,MAAqB,OAArB,C,CACA;;AACA,MAAMC,kBAAkB,GAAG;AACzBC,EAAAA,KAAK,EAAE,IADkB;AAEzBC,EAAAA,KAAK,EAAE;AAAEC,IAAAA,KAAK,EAAE,KAAT;AAAgBC,IAAAA,MAAM,EAAE;AAAxB;AAFkB,CAA3B,C,CAKA;;AACA,MAAMC,oBAAoB,GAAG;AAC3BJ,EAAAA,KAAK,EAAE,IADoB;AAE3BC,EAAAA,KAAK,EAAE;AAFoB,CAA7B;AAKA,IAAII,WAAJ,C,CAEA;;AACA,OAAO,MAAMC,oCAAoC,GAAG,gBAClDC,UADkD,EAElDC,QAFkD,EAK/C;AAAA,MAFHC,MAEG,uEAFM,IAEN;AAAA,MADHC,SACG;AACH;AACA,QAAMC,UAAU,GAAGD,SAAS,GAAGN,oBAAH,GAA0BL,kBAAtD,CAFG,CAIH;;AACAa,EAAAA,SAAS,CAACC,YAAV,CACGC,YADH,CACgBH,UADhB,EAEGI,IAFH,CAESC,MAAD,IAAY;AAChB;AACAX,IAAAA,WAAW,GAAGW,MAAd,CAFgB,CAGhB;;AACAC,IAAAA,qBAAqB,CAACZ,WAAD,CAArB,CAJgB,CAMhB;;AACAX,IAAAA,KAAK,CAACwB,QAAN,CAAevB,cAAc,CAAC,KAAD,CAA7B,EAPgB,CAShB;;AACAY,IAAAA,UAAU,GACNT,GAAG,CAACqB,aAAJ,CAAkBX,QAAlB,EAA4BE,SAA5B,CADM,GAENZ,GAAG,CAACsB,QAAJ,CAAaX,MAAb,EAAqBD,QAArB,EAA+BE,SAA/B,CAFJ;AAGD,GAfH,EAgBGW,KAhBH,CAgBUC,KAAD,IAAW;AAChBC,IAAAA,OAAO,CAACC,GAAR,CAAY,YAAZ;AACAD,IAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AACD,GAnBH;AAoBD,CA9BM;AAgCP,IAAIG,KAAK,GAAG,EAAZ;AACA,IAAIC,OAAO,GAAG,EAAd,C,CACA;;AACA,MAAMC,gBAAgB,GAAG,MAAM;AAC7B,SAAO;AACLC,IAAAA,UAAU,EAAE,CACV;AACEC,MAAAA,IAAI,EAAE;AADR,KADU;AADP,GAAP;AAOD,CARD;;AAUA,MAAMC,cAAc,GAAG,UAAvB,C,CAEA;;AACA,OAAO,MAAMC,wBAAwB,GAAG,CAACC,gBAAD,EAAmBC,WAAnB,KAAmC;AACzE,QAAMC,aAAa,GAAGP,gBAAgB,EAAtC,CADyE,CAEzE;;AACAF,EAAAA,KAAK,CAACO,gBAAD,CAAL,GAA0B,IAAInC,IAAJ,CAAS;AACjCsC,IAAAA,SAAS,EAAEF,WADsB;AAEjCG,IAAAA,MAAM,EAAEF,aAFyB;AAGjClB,IAAAA,MAAM,EAAEX,WAHyB;AAIjCgC,IAAAA,WAAW,EAAEP;AAJoB,GAAT,CAA1B,CAHyE,CAUzE;;AACAL,EAAAA,KAAK,CAACO,gBAAD,CAAL,CAAwBM,EAAxB,CAA2B,QAA3B,EAAsCC,IAAD,IAAU;AAC7C;AACA;AACA,UAAMC,UAAU,GAAG;AACjBC,MAAAA,MAAM,EAAEF,IADS;AAEjBP,MAAAA,gBAAgB,EAAEA;AAFD,KAAnB;AAIAlC,IAAAA,GAAG,CAAC4C,cAAJ,CAAmBF,UAAnB;AACD,GARD,EAXyE,CAqBzE;;AACAf,EAAAA,KAAK,CAACO,gBAAD,CAAL,CAAwBM,EAAxB,CAA2B,QAA3B,EAAsCtB,MAAD,IAAY;AAC/CO,IAAAA,OAAO,CAACC,GAAR,CAAY,cAAZ,EAD+C,CAE/C;;AACAmB,IAAAA,SAAS,CAAC3B,MAAD,EAASgB,gBAAT,CAAT;AACAN,IAAAA,OAAO,GAAG,CAAC,GAAGA,OAAJ,EAAaV,MAAb,CAAV;AACD,GALD,EAtByE,CA6BzE;;AACAS,EAAAA,KAAK,CAACO,gBAAD,CAAL,CAAwBM,EAAxB,CAA2B,MAA3B,EAAoCC,IAAD,IAAU;AAC3C,UAAMK,WAAW,GAAGC,IAAI,CAACC,KAAL,CAAWP,IAAX,CAApB;AACAQ,IAAAA,gBAAgB,CAACH,WAAD,CAAhB;AACD,GAHD;AAID,CAlCM;AAoCP,OAAO,MAAMI,mBAAmB,GAAIT,IAAD,IAAU;AAC3C;AACAd,EAAAA,KAAK,CAACc,IAAI,CAACP,gBAAN,CAAL,CAA6BS,MAA7B,CAAoCF,IAAI,CAACE,MAAzC,EAF2C,CAEO;AACnD,CAHM;AAKP,OAAO,MAAMQ,oBAAoB,GAAIV,IAAD,IAAU;AAC5C,QAAM;AAAEW,IAAAA;AAAF,MAAeX,IAArB;AACA,QAAMY,cAAc,GAAGC,QAAQ,CAACC,cAAT,CAAwBH,QAAxB,CAAvB;AACA,QAAMI,YAAY,GAAGF,QAAQ,CAACC,cAAT,CAAyB,GAAEH,QAAS,QAApC,CAArB;;AAEA,MAAIC,cAAc,IAAIG,YAAtB,EAAoC;AAClC,UAAMC,MAAM,GAAGD,YAAY,CAACE,SAAb,CAAuBC,SAAvB,EAAf;AAEAF,IAAAA,MAAM,CAACG,OAAP,CAAgBC,KAAD,IAAWA,KAAK,CAACC,IAAN,EAA1B;AAEAN,IAAAA,YAAY,CAACE,SAAb,GAAyB,IAAzB;AACAL,IAAAA,cAAc,CAACU,WAAf,CAA2BP,YAA3B;AACAH,IAAAA,cAAc,CAACW,UAAf,CAA0BD,WAA1B,CAAsCV,cAAtC;;AAEA,QAAI1B,KAAK,CAACyB,QAAD,CAAT,EAAqB;AACnBzB,MAAAA,KAAK,CAACyB,QAAD,CAAL,CAAgBa,OAAhB;AACD;;AAED,WAAOtC,KAAK,CAACyB,QAAD,CAAZ;AACD;AACF,CApBM,C,CAsBP;AAEA;;AACA,MAAMjC,qBAAqB,GAAID,MAAD,IAAY;AACxC,QAAMgD,eAAe,GAAGZ,QAAQ,CAACC,cAAT,CAAwB,eAAxB,CAAxB;AACAW,EAAAA,eAAe,CAACC,SAAhB,CAA0BC,GAA1B,CAA8B,sBAA9B;AACA,QAAMf,cAAc,GAAGC,QAAQ,CAACe,aAAT,CAAuB,KAAvB,CAAvB;AACAhB,EAAAA,cAAc,CAACc,SAAf,CAAyBC,GAAzB,CAA6B,uBAA7B;AACA,QAAMZ,YAAY,GAAGF,QAAQ,CAACe,aAAT,CAAuB,OAAvB,CAArB;AACAb,EAAAA,YAAY,CAACc,QAAb,GAAwB,IAAxB;AACAd,EAAAA,YAAY,CAACe,KAAb,GAAqB,IAArB;AACAf,EAAAA,YAAY,CAACE,SAAb,GAAyBxC,MAAzB,CARwC,CAUxC;;AACAsC,EAAAA,YAAY,CAACgB,gBAAb,GAAgC,MAAM;AACpChB,IAAAA,YAAY,CAACiB,IAAb;AACD,GAFD;;AAIApB,EAAAA,cAAc,CAACqB,WAAf,CAA2BlB,YAA3B,EAfwC,CAiBxC;;AACA,MAAI5D,KAAK,CAAC+E,QAAN,GAAiBC,oBAArB,EAA2C;AACzCvB,IAAAA,cAAc,CAACqB,WAAf,CAA2BG,cAAc,EAAzC;AACD;;AACDX,EAAAA,eAAe,CAACQ,WAAhB,CAA4BrB,cAA5B;AACD,CAtBD,C,CAwBA;;;AACA,MAAMR,SAAS,GAAG,CAAC3B,MAAD,EAASgB,gBAAT,KAA8B;AAC9C;AACA,QAAMgC,eAAe,GAAGZ,QAAQ,CAACC,cAAT,CAAwB,eAAxB,CAAxB;AACA,QAAMF,cAAc,GAAGC,QAAQ,CAACe,aAAT,CAAuB,KAAvB,CAAvB;AACAhB,EAAAA,cAAc,CAACyB,EAAf,GAAoB5C,gBAApB;AACAmB,EAAAA,cAAc,CAACc,SAAf,CAAyBC,GAAzB,CAA6B,uBAA7B;AACA,QAAMZ,YAAY,GAAGF,QAAQ,CAACe,aAAT,CAAuB,OAAvB,CAArB;AACAb,EAAAA,YAAY,CAACc,QAAb,GAAwB,IAAxB;AACAd,EAAAA,YAAY,CAACe,KAAb,GAAqB,IAArB;AACAf,EAAAA,YAAY,CAACE,SAAb,GAAyBxC,MAAzB;AACAsC,EAAAA,YAAY,CAACsB,EAAb,GAAmB,GAAE5C,gBAAiB,QAAtC,CAV8C,CAY9C;;AACAsB,EAAAA,YAAY,CAACgB,gBAAb,GAAgC,MAAM;AACpChB,IAAAA,YAAY,CAACiB,IAAb;AACD,GAFD,CAb8C,CAiB9C;;;AACAjB,EAAAA,YAAY,CAACuB,gBAAb,CAA8B,OAA9B,EAAuC,MAAM;AAC3C,QAAIvB,YAAY,CAACW,SAAb,CAAuBa,QAAvB,CAAgC,aAAhC,CAAJ,EAAoD;AAClDxB,MAAAA,YAAY,CAACW,SAAb,CAAuBc,MAAvB,CAA8B,aAA9B;AACD,KAFD,MAEO;AACLzB,MAAAA,YAAY,CAACW,SAAb,CAAuBC,GAAvB,CAA2B,aAA3B;AACD;AACF,GAND;AAQAf,EAAAA,cAAc,CAACqB,WAAf,CAA2BlB,YAA3B,EA1B8C,CA4B9C;;AACA,QAAM0B,YAAY,GAAGtF,KAAK,CAAC+E,QAAN,GAAiBO,YAAtC;AACA,QAAMC,WAAW,GAAGD,YAAY,CAACE,IAAb,CAAmBC,CAAD,IAAOA,CAAC,CAACjC,QAAF,KAAelB,gBAAxC,CAApB;;AAEA,MAAIiD,WAAJ,aAAIA,WAAJ,uBAAIA,WAAW,CAAEvE,SAAjB,EAA4B;AAC1ByC,IAAAA,cAAc,CAACqB,WAAf,CAA2BG,cAAc,CAACM,WAAW,CAACzE,QAAb,CAAzC;AACD,GAFD,MAEO;AACL2C,IAAAA,cAAc,CAACiC,KAAf,CAAqBC,QAArB,GAAgC,QAAhC;AACD;;AAEDrB,EAAAA,eAAe,CAACQ,WAAhB,CAA4BrB,cAA5B;AACD,CAvCD,C,CAyCA;;;AACA,MAAMwB,cAAc,GAAG,YAAmB;AAAA,MAAlBnE,QAAkB,uEAAP,EAAO;AACxC,QAAM8E,cAAc,GAAGlC,QAAQ,CAACe,aAAT,CAAuB,KAAvB,CAAvB;AACAmB,EAAAA,cAAc,CAACrB,SAAf,CAAyBC,GAAzB,CAA6B,4BAA7B;AAEA,QAAMqB,KAAK,GAAGnC,QAAQ,CAACe,aAAT,CAAuB,GAAvB,CAAd;AACAoB,EAAAA,KAAK,CAACtB,SAAN,CAAgBC,GAAhB,CAAoB,uBAApB;AACAqB,EAAAA,KAAK,CAACC,SAAN,GAAmB,GAAEhF,QAAS,SAA9B;AACA8E,EAAAA,cAAc,CAACd,WAAf,CAA2Be,KAA3B;AACA,SAAOD,cAAP;AACD,CATD,C,CAUA;;;AACA,OAAO,MAAMG,SAAS,GAAIC,OAAD,IAAa;AACpC;AACA;AACArF,EAAAA,WAAW,CAACsF,cAAZ,GAA6B,CAA7B,EAAgCC,OAAhC,GAA0CF,OAAO,GAAG,IAAH,GAAU,KAA3D;AACD,CAJM;AAMP,OAAO,MAAMG,YAAY,GAAIC,UAAD,IAAgB;AAC1CzF,EAAAA,WAAW,CAAC0F,cAAZ,GAA6B,CAA7B,EAAgCH,OAAhC,GAA0CE,UAAU,GAAG,IAAH,GAAU,KAA9D;AACD,CAFM;AAIP,OAAO,MAAME,iBAAiB,GAAG,UAC/BC,qBAD+B,EAG5B;AAAA,MADHC,mBACG,uEADmB,IACnB;;AACH,MAAID,qBAAJ,EAA2B;AACzB;AACAE,IAAAA,iBAAiB,CAAC9F,WAAD,CAAjB;AACD,GAHD,MAGO;AACL;AACA8F,IAAAA,iBAAiB,CAACD,mBAAD,CAAjB;AACD;AACF,CAXM;;AAaP,MAAMC,iBAAiB,GAAInF,MAAD,IAAY;AACpC;AACA,OAAK,IAAIoF,SAAT,IAAsB3E,KAAtB,EAA6B;AAC3B,SAAK,IAAI4E,KAAT,IAAkB5E,KAAK,CAAC2E,SAAD,CAAL,CAAiB1E,OAAjB,CAAyB,CAAzB,EAA4B+B,SAA5B,EAAlB,EAA2D;AACzD,WAAK,IAAI6C,MAAT,IAAmBtF,MAAM,CAACyC,SAAP,EAAnB,EAAuC;AACrC;AACA,YACEhC,KAAK,CAAC2E,SAAD,CAAL,CAAiB1E,OAAjB,CAAyB,CAAzB,EAA4B+B,SAA5B,GAAwC4C,KAAxC,EAA+CE,IAA/C,KACAvF,MAAM,CAACyC,SAAP,GAAmB6C,MAAnB,EAA2BC,IAF7B,EAGE;AACA9E,UAAAA,KAAK,CAAC2E,SAAD,CAAL,CAAiBI,YAAjB,CACE/E,KAAK,CAAC2E,SAAD,CAAL,CAAiB1E,OAAjB,CAAyB,CAAzB,EAA4B+B,SAA5B,GAAwC4C,KAAxC,CADF,EAEErF,MAAM,CAACyC,SAAP,GAAmB6C,MAAnB,CAFF,EAGE7E,KAAK,CAAC2E,SAAD,CAAL,CAAiB1E,OAAjB,CAAyB,CAAzB,CAHF;AAKD;AACF;AACF;AACF;AACF,CAnBD,C,CAoBA;;;AACA,MAAMqB,gBAAgB,GAAIH,WAAD,IAAiB;AACxC;AACA,QAAM6D,QAAQ,GAAG/G,KAAK,CAAC+E,QAAN,GAAiBgC,QAAlC;AACA/G,EAAAA,KAAK,CAACwB,QAAN,CAAetB,WAAW,CAAC,CAAC,GAAG6G,QAAJ,EAAc7D,WAAd,CAAD,CAA1B;AACD,CAJD,C,CAMA;;;AACA,OAAO,MAAM8D,2BAA2B,GAAIC,cAAD,IAAoB;AAC7D;AACA,QAAMnG,QAAQ,GAAGd,KAAK,CAAC+E,QAAN,GAAiBjE,QAAlC;AAEA,QAAMoG,gBAAgB,GAAG;AACvBC,IAAAA,OAAO,EAAEF,cADc;AAEvBnG,IAAAA,QAAQ,EAAEA,QAFa;AAGvBsG,IAAAA,kBAAkB,EAAE;AAHG,GAAzB,CAJ6D,CAS7D;;AACA/D,EAAAA,gBAAgB,CAAC6D,gBAAD,CAAhB,CAV6D,CAY7D;;AACA,QAAMhE,WAAW,GAAG;AAClBiE,IAAAA,OAAO,EAAEF,cADS;AAElBnG,IAAAA,QAAQ,EAAEA;AAFQ,GAApB;AAKA,QAAMuG,sBAAsB,GAAGlE,IAAI,CAACmE,SAAL,CAAepE,WAAf,CAA/B;;AACA,OAAK,IAAIwD,SAAT,IAAsB3E,KAAtB,EAA6B;AAC3BA,IAAAA,KAAK,CAAC2E,SAAD,CAAL,CAAiBa,IAAjB,CAAsBF,sBAAtB;AACD;AACF,CAtBM","sourcesContent":["import store from '../store/store';\nimport { setShowOverlay, setMessages } from '../store/actions';\nimport Peer from 'simple-peer';\nimport * as wss from './wss';\n//指定请求的媒体类型和相对应的参数。\nconst defaultConstraints = {\n  audio: true,\n  video: { width: '480', height: '360' },\n};\n\n//仅开启音频链接\nconst onlyAudioConstraints = {\n  audio: true,\n  video: false,\n};\n\nlet localStream;\n\n//获取本地预览及初始化房间连接\nexport const getLocalPreviewAndInitRoomConnection = async (\n  isRoomHost,\n  identity,\n  roomId = null,\n  onlyAudio\n) => {\n  //判断是开启音频还是音视频\n  const constrains = onlyAudio ? onlyAudioConstraints : defaultConstraints;\n\n  //采集本地音视频流（获取媒体输入的访问权限）\n  navigator.mediaDevices\n    .getUserMedia(constrains)\n    .then((stream) => {\n      //   console.log('成功获取本地媒体流');\n      localStream = stream;\n      //预览本地视频\n      showLocalVideoPreview(localStream);\n\n      //派发action隐藏加载动画\n      store.dispatch(setShowOverlay(false));\n\n      //初始化房间连接\n      isRoomHost\n        ? wss.createNewRoom(identity, onlyAudio)\n        : wss.joinRoom(roomId, identity, onlyAudio);\n    })\n    .catch((error) => {\n      console.log('无法获取本地媒体流！');\n      console.log(error);\n    });\n};\n\nlet peers = {};\nlet streams = [];\n//配置STUN服务器\nconst getConfiguration = () => {\n  return {\n    iceServers: [\n      {\n        urls: 'stun:stun1.l.google.com:19302',\n      },\n    ],\n  };\n};\n\nconst messageChannel = 'messager';\n\n//准备webRTC连接\nexport const prepareNewPeerConnection = (connUserSocketId, isInitiator) => {\n  const configuration = getConfiguration();\n  //实例化对等连接对象\n  peers[connUserSocketId] = new Peer({\n    initiator: isInitiator,\n    config: configuration,\n    stream: localStream,\n    channelName: messageChannel,\n  });\n\n  //信令数据传递\n  peers[connUserSocketId].on('signal', (data) => {\n    //==>peer1.on('signal', data)\n    //data - webrtc offer, answer, or ice candidate\n    const signalData = {\n      signal: data,\n      connUserSocketId: connUserSocketId,\n    };\n    wss.signalPeerData(signalData);\n  });\n\n  //获取媒体流stream\n  peers[connUserSocketId].on('stream', (stream) => {\n    console.log('成功获取远程Stream');\n    //显示接收的stream媒体流\n    addStream(stream, connUserSocketId);\n    streams = [...streams, stream];\n  });\n\n  //data数据通道\n  peers[connUserSocketId].on('data', (data) => {\n    const messageData = JSON.parse(data);\n    appendNewMessage(messageData);\n  });\n};\n\nexport const handleSignalingData = (data) => {\n  //将信令数据添加到对等连接中\n  peers[data.connUserSocketId].signal(data.signal); //==> peer2.signal(data)\n};\n\nexport const removePeerConnection = (data) => {\n  const { socketId } = data;\n  const videoContainer = document.getElementById(socketId);\n  const videoElement = document.getElementById(`${socketId}-video`);\n\n  if (videoContainer && videoElement) {\n    const tracks = videoElement.srcObject.getTracks();\n\n    tracks.forEach((track) => track.stop());\n\n    videoElement.srcObject = null;\n    videoContainer.removeChild(videoElement);\n    videoContainer.parentNode.removeChild(videoContainer);\n\n    if (peers[socketId]) {\n      peers[socketId].destroy();\n    }\n\n    delete peers[socketId];\n  }\n};\n\n/////////////////////////Video UI ///////////////////////////////////////\n\n//显示本地视频\nconst showLocalVideoPreview = (stream) => {\n  const videosContainer = document.getElementById('videos_portal');\n  videosContainer.classList.add('videos_portal_styles');\n  const videoContainer = document.createElement('div');\n  videoContainer.classList.add('video_track_container');\n  const videoElement = document.createElement('video');\n  videoElement.autoplay = true;\n  videoElement.muted = true;\n  videoElement.srcObject = stream;\n\n  //onloadedmetadata在指定视频/音频（audio/video）的元数据加载后触发。\n  videoElement.onloadedmetadata = () => {\n    videoElement.play();\n  };\n\n  videoContainer.appendChild(videoElement);\n\n  //仅开启音频的样式\n  if (store.getState().connectOnlyWithAudio) {\n    videoContainer.appendChild(onlyAudioLabel());\n  }\n  videosContainer.appendChild(videoContainer);\n};\n\n//添加接收的stream媒体流并进行显示\nconst addStream = (stream, connUserSocketId) => {\n  //使用js创建容器展示视频\n  const videosContainer = document.getElementById('videos_portal');\n  const videoContainer = document.createElement('div');\n  videoContainer.id = connUserSocketId;\n  videoContainer.classList.add('video_track_container');\n  const videoElement = document.createElement('video');\n  videoElement.autoplay = true;\n  videoElement.muted = true;\n  videoElement.srcObject = stream;\n  videoElement.id = `${connUserSocketId}-video`;\n\n  //onloadedmetadata在指定视频/音频（audio/video）的元数据加载后触发。\n  videoElement.onloadedmetadata = () => {\n    videoElement.play();\n  };\n\n  //放大/缩小视频信息\n  videoElement.addEventListener('click', () => {\n    if (videoElement.classList.contains('full_screen')) {\n      videoElement.classList.remove('full_screen');\n    } else {\n      videoElement.classList.add('full_screen');\n    }\n  });\n\n  videoContainer.appendChild(videoElement);\n\n  //判断哪些用户是仅开启音频\n  const participants = store.getState().participants;\n  const participant = participants.find((p) => p.socketId === connUserSocketId);\n\n  if (participant?.onlyAudio) {\n    videoContainer.appendChild(onlyAudioLabel(participant.identity));\n  } else {\n    videoContainer.style.position = 'static';\n  }\n\n  videosContainer.appendChild(videoContainer);\n};\n\n//仅开启音频链接的样式效果\nconst onlyAudioLabel = (identity = '') => {\n  const labelContainer = document.createElement('div');\n  labelContainer.classList.add('label_only_audio_container');\n\n  const label = document.createElement('p');\n  label.classList.add('label_only_audio_text');\n  label.innerHTML = `${identity}仅开启音频连接`;\n  labelContainer.appendChild(label);\n  return labelContainer;\n};\n/////////////////////////button logic ///////////////////////////////////////\nexport const toggleMic = (isMuted) => {\n  //getAudioTracks - 返回可用的音频轨道\n  //enabled - 获取或设置轨道是否激活 (true|false)\n  localStream.getAudioTracks()[0].enabled = isMuted ? true : false;\n};\n\nexport const toggleCamera = (isDisabled) => {\n  localStream.getVideoTracks()[0].enabled = isDisabled ? true : false;\n};\n\nexport const toggleScreenShare = (\n  isScreenSharingActive,\n  screenSharingStream = null\n) => {\n  if (isScreenSharingActive) {\n    //展示本地的媒体流\n    switchVideoTracks(localStream);\n  } else {\n    //展示共享屏幕媒体流\n    switchVideoTracks(screenSharingStream);\n  }\n};\n\nconst switchVideoTracks = (stream) => {\n  //遍历所有对等连接对象\n  for (let socket_id in peers) {\n    for (let index in peers[socket_id].streams[0].getTracks()) {\n      for (let index2 in stream.getTracks()) {\n        //kind属性规定轨道的种类（eg:audio,video）\n        if (\n          peers[socket_id].streams[0].getTracks()[index].kind ===\n          stream.getTracks()[index2].kind\n        ) {\n          peers[socket_id].replaceTrack(\n            peers[socket_id].streams[0].getTracks()[index],\n            stream.getTracks()[index2],\n            peers[socket_id].streams[0]\n          );\n        }\n      }\n    }\n  }\n};\n/////////////////////////Messages ///////////////////////////////////////\nconst appendNewMessage = (messageData) => {\n  //同步到store进行保存\n  const messages = store.getState().messages;\n  store.dispatch(setMessages([...messages, messageData]));\n};\n\n//通过data通道发送聊天信息\nexport const sendMessageUsingDataChannel = (messageContent) => {\n  //本地创建的聊天信息\n  const identity = store.getState().identity;\n\n  const localMessageData = {\n    content: messageContent,\n    identity: identity,\n    messageCreatedByMe: true,\n  };\n  //将本地发送的聊天信息存储到store\n  appendNewMessage(localMessageData);\n\n  //聊天信息发送给远程webRTC对等方\n  const messageData = {\n    content: messageContent,\n    identity: identity,\n  };\n\n  const stringifiedMessageData = JSON.stringify(messageData);\n  for (let socket_id in peers) {\n    peers[socket_id].send(stringifiedMessageData);\n  }\n};\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import io from 'socket.io-client';\nimport store from '../store/store';\nimport { setRoomId, setParticipants, setSocketId } from '../store/actions';\nimport * as webRTCHandler from './webRTCHandler';\nimport { appendNewMessageToChatHistory } from './directMessages';\nconst SERVER = 'http://localhost:5000';\nlet socket = null; //客户端连接 socketio 服务器\n\nexport const connectWithSocketIOServer = () => {\n  socket = io(SERVER);\n  socket.on('connect', () => {\n    console.log('成功连接到socket.io 服务器');\n    console.log(socket.id);\n    store.dispatch(setSocketId(socket.id));\n  });\n  socket.on('room-id', data => {\n    const {\n      roomId\n    } = data;\n    store.dispatch(setRoomId(roomId));\n  });\n  socket.on('room-update', data => {\n    const {\n      connectedUsers\n    } = data;\n    store.dispatch(setParticipants(connectedUsers));\n  });\n  socket.on('conn-prepare', data => {\n    const {\n      connUserSocketId\n    } = data; //准备webRTC连接(应答方-false)\n\n    webRTCHandler.prepareNewPeerConnection(connUserSocketId, false); //通知对方我已经准备完毕可以进行webRTC连接\n\n    socket.emit('conn-init', {\n      connUserSocketId: connUserSocketId\n    });\n  });\n  socket.on('conn-signal', data => {\n    webRTCHandler.handleSignalingData(data);\n  });\n  socket.on('conn-init', data => {\n    const {\n      connUserSocketId\n    } = data; //准备webRTC连接(发起方-true)\n\n    webRTCHandler.prepareNewPeerConnection(connUserSocketId, true);\n  });\n  socket.on('user-disconected', data => {\n    webRTCHandler.removePeerConnection(data);\n  });\n  socket.on('direct-message', data => {\n    // console.log('成功获取发送的私信');\n    // console.log(data);\n    appendNewMessageToChatHistory(data);\n  });\n}; //主持人创建会议房间\n\nexport const createNewRoom = (identity, onlyAudio) => {\n  const data = {\n    identity,\n    onlyAudio\n  }; //向服务器发送创建会议房间的数据（事件）\n\n  socket.emit('create-new-room', data);\n}; //加入会议房间\n\nexport const joinRoom = (roomId, identity, onlyAudio) => {\n  //向服务器发送加入会议房间的数据（事件）\n  const data = {\n    roomId,\n    identity,\n    onlyAudio\n  };\n  socket.emit('join-room', data);\n};\nexport const signalPeerData = data => {\n  socket.emit('conn-signal', data);\n};\nexport const sendDirectMessage = data => {\n  socket.emit('direct-message', data);\n};","map":{"version":3,"sources":["E:/onedrive/桌面/前端学习/webRTC/webRTC/myapp/src/utils/wss.js"],"names":["io","store","setRoomId","setParticipants","setSocketId","webRTCHandler","appendNewMessageToChatHistory","SERVER","socket","connectWithSocketIOServer","on","console","log","id","dispatch","data","roomId","connectedUsers","connUserSocketId","prepareNewPeerConnection","emit","handleSignalingData","removePeerConnection","createNewRoom","identity","onlyAudio","joinRoom","signalPeerData","sendDirectMessage"],"mappings":"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","sourcesContent":["import io from 'socket.io-client';\nimport store from '../store/store';\nimport { setRoomId, setParticipants, setSocketId } from '../store/actions';\nimport * as webRTCHandler from './webRTCHandler';\nimport { appendNewMessageToChatHistory } from './directMessages';\nconst SERVER = 'http://localhost:5000';\n\nlet socket = null;\n//客户端连接 socketio 服务器\nexport const connectWithSocketIOServer = () => {\n  socket = io(SERVER);\n  socket.on('connect', () => {\n    console.log('成功连接到socket.io 服务器');\n    console.log(socket.id);\n    store.dispatch(setSocketId(socket.id));\n  });\n  socket.on('room-id', (data) => {\n    const { roomId } = data;\n    store.dispatch(setRoomId(roomId));\n  });\n  socket.on('room-update', (data) => {\n    const { connectedUsers } = data;\n    store.dispatch(setParticipants(connectedUsers));\n  });\n\n  socket.on('conn-prepare', (data) => {\n    const { connUserSocketId } = data;\n    //准备webRTC连接(应答方-false)\n    webRTCHandler.prepareNewPeerConnection(connUserSocketId, false);\n\n    //通知对方我已经准备完毕可以进行webRTC连接\n    socket.emit('conn-init', { connUserSocketId: connUserSocketId });\n  });\n  socket.on('conn-signal', (data) => {\n    webRTCHandler.handleSignalingData(data);\n  });\n\n  socket.on('conn-init', (data) => {\n    const { connUserSocketId } = data;\n    //准备webRTC连接(发起方-true)\n    webRTCHandler.prepareNewPeerConnection(connUserSocketId, true);\n  });\n\n  socket.on('user-disconected', (data) => {\n    webRTCHandler.removePeerConnection(data);\n  });\n\n  socket.on('direct-message', (data) => {\n    // console.log('成功获取发送的私信');\n    // console.log(data);\n    appendNewMessageToChatHistory(data);\n  });\n};\n\n//主持人创建会议房间\nexport const createNewRoom = (identity, onlyAudio) => {\n  const data = {\n    identity,\n    onlyAudio,\n  };\n  //向服务器发送创建会议房间的数据（事件）\n  socket.emit('create-new-room', data);\n};\n\n//加入会议房间\nexport const joinRoom = (roomId, identity, onlyAudio) => {\n  //向服务器发送加入会议房间的数据（事件）\n  const data = {\n    roomId,\n    identity,\n    onlyAudio,\n  };\n\n  socket.emit('join-room', data);\n};\n\nexport const signalPeerData = (data) => {\n  socket.emit('conn-signal', data);\n};\n\nexport const sendDirectMessage = (data) => {\n  socket.emit('direct-message', data);\n};\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"var _jsxFileName = \"E:\\\\onedrive\\\\\\u684C\\u9762\\\\\\u524D\\u7AEF\\u5B66\\u4E60\\\\webRTC\\\\webRTC\\\\myapp\\\\src\\\\pages\\\\JoinRoomPage\\\\JoinRoomContent.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport JoinRoomInputs from './JoinRoomInputs';\nimport { connect } from 'react-redux';\nimport OnlyWithAudioCheckbox from './OnlyWithAudioCheckbox';\nimport { setConnectOnlyWithAudio, setRoomId, setIdentity } from '../../store/actions';\nimport ErrorMessage from './ErrorMessage';\nimport JoinRoomButtons from './JoinRoomButtons';\nimport { getRoomExists } from '../../utils/api';\nimport { useNavigate } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst JoinRoomContent = props => {\n  _s();\n\n  const {\n    isRoomHost,\n    setConnectOnlyWithAudio,\n    connectOnlyWithAudio,\n    setIdentityAction,\n    setRoomIdAction\n  } = props;\n  const [roomIdValue, setRoomIdValue] = useState('');\n  const [nameValue, setNameValue] = useState('');\n  const [errorMessage, setErrorMessage] = useState(null);\n  const navigate = useNavigate(); //加入房间\n\n  const handleJoinRoom = async () => {\n    setIdentityAction(nameValue);\n\n    if (isRoomHost) {\n      createRoom();\n    } else {\n      await joinRoom();\n    }\n  };\n\n  const joinRoom = async () => {\n    const responseMessage = await getRoomExists(roomIdValue);\n    const {\n      roomExists,\n      full\n    } = responseMessage;\n\n    if (roomExists) {\n      if (full) {\n        setErrorMessage('会议房间人数已满，请稍后再试！');\n      } else {\n        //进入房间\n        setRoomIdAction(roomIdValue);\n        navigate('/room');\n      }\n    } else {\n      setErrorMessage('会议房间不存在，请验证你的ID是否正确！');\n    }\n  };\n\n  const createRoom = () => {\n    navigate('/room');\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(JoinRoomInputs, {\n      roomIdValue: roomIdValue,\n      setRoomIdValue: setRoomIdValue,\n      nameValue: nameValue,\n      setNameValue: setNameValue,\n      isRoomHost: isRoomHost\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(OnlyWithAudioCheckbox, {\n      connectOnlyWithAudio: connectOnlyWithAudio,\n      setConnectOnlyWithAudio: setConnectOnlyWithAudio\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ErrorMessage, {\n      errorMessage: errorMessage\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(JoinRoomButtons, {\n      isRoomHost: isRoomHost,\n      handleJoinRoom: handleJoinRoom\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n\n_s(JoinRoomContent, \"xnURZxjogN3Zj8sK4ioZibYBuhI=\", false, function () {\n  return [useNavigate];\n});\n\n_c = JoinRoomContent;\n\nconst mapStateToProps = state => {\n  return { ...state\n  };\n};\n\nconst mapActionsToProps = dispatch => {\n  return {\n    setConnectOnlyWithAudio: onlyWithAudio => dispatch(setConnectOnlyWithAudio(onlyWithAudio)),\n    setIdentityAction: identity => dispatch(setIdentity(identity)),\n    setRoomIdAction: roomId => dispatch(setRoomId(roomId))\n  };\n};\n\nexport default connect(mapStateToProps, mapActionsToProps)(JoinRoomContent);\n\nvar _c;\n\n$RefreshReg$(_c, \"JoinRoomContent\");","map":{"version":3,"sources":["E:/onedrive/桌面/前端学习/webRTC/webRTC/myapp/src/pages/JoinRoomPage/JoinRoomContent.js"],"names":["React","useState","JoinRoomInputs","connect","OnlyWithAudioCheckbox","setConnectOnlyWithAudio","setRoomId","setIdentity","ErrorMessage","JoinRoomButtons","getRoomExists","useNavigate","JoinRoomContent","props","isRoomHost","connectOnlyWithAudio","setIdentityAction","setRoomIdAction","roomIdValue","setRoomIdValue","nameValue","setNameValue","errorMessage","setErrorMessage","navigate","handleJoinRoom","createRoom","joinRoom","responseMessage","roomExists","full","mapStateToProps","state","mapActionsToProps","dispatch","onlyWithAudio","identity","roomId"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\nimport JoinRoomInputs from './JoinRoomInputs';\nimport { connect } from 'react-redux';\nimport OnlyWithAudioCheckbox from './OnlyWithAudioCheckbox';\nimport {\n  setConnectOnlyWithAudio,\n  setRoomId,\n  setIdentity,\n} from '../../store/actions';\nimport ErrorMessage from './ErrorMessage';\nimport JoinRoomButtons from './JoinRoomButtons';\nimport { getRoomExists } from '../../utils/api';\nimport { useNavigate } from 'react-router-dom';\nconst JoinRoomContent = (props) => {\n  const {\n    isRoomHost,\n    setConnectOnlyWithAudio,\n    connectOnlyWithAudio,\n    setIdentityAction,\n    setRoomIdAction,\n  } = props;\n  const [roomIdValue, setRoomIdValue] = useState('');\n  const [nameValue, setNameValue] = useState('');\n  const [errorMessage, setErrorMessage] = useState(null);\n  const navigate = useNavigate();\n  //加入房间\n  const handleJoinRoom = async () => {\n    setIdentityAction(nameValue);\n    if (isRoomHost) {\n      createRoom();\n    } else {\n      await joinRoom();\n    }\n  };\n\n  const joinRoom = async () => {\n    const responseMessage = await getRoomExists(roomIdValue);\n\n    const { roomExists, full } = responseMessage;\n\n    if (roomExists) {\n      if (full) {\n        setErrorMessage('会议房间人数已满，请稍后再试！');\n      } else {\n        //进入房间\n        setRoomIdAction(roomIdValue);\n        navigate('/room');\n      }\n    } else {\n      setErrorMessage('会议房间不存在，请验证你的ID是否正确！');\n    }\n  };\n\n  const createRoom = () => {\n    navigate('/room');\n  };\n\n  return (\n    <>\n      <JoinRoomInputs\n        roomIdValue={roomIdValue}\n        setRoomIdValue={setRoomIdValue}\n        nameValue={nameValue}\n        setNameValue={setNameValue}\n        isRoomHost={isRoomHost}\n      />\n      <OnlyWithAudioCheckbox\n        connectOnlyWithAudio={connectOnlyWithAudio}\n        setConnectOnlyWithAudio={setConnectOnlyWithAudio}\n      />\n      <ErrorMessage errorMessage={errorMessage} />\n      <JoinRoomButtons\n        isRoomHost={isRoomHost}\n        handleJoinRoom={handleJoinRoom}\n      />\n    </>\n  );\n};\n\nconst mapStateToProps = (state) => {\n  return {\n    ...state,\n  };\n};\n\nconst mapActionsToProps = (dispatch) => {\n  return {\n    setConnectOnlyWithAudio: (onlyWithAudio) =>\n      dispatch(setConnectOnlyWithAudio(onlyWithAudio)),\n    setIdentityAction: (identity) => dispatch(setIdentity(identity)),\n    setRoomIdAction: (roomId) => dispatch(setRoomId(roomId)),\n  };\n};\n\nexport default connect(mapStateToProps, mapActionsToProps)(JoinRoomContent);\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import store from '../store/store';\nimport { setDirectChatHistory } from '../store/actions';\nexport const appendNewMessageToChatHistory = data => {\n  const {\n    isAuthor,\n    receiverSocketId,\n    authorSocketId\n  } = data; //根据isAuhtor的值判断历史记录应该存储在那个用户（接收方/发送方）的历史记录里面\n\n  if (isAuthor) {\n    //作为消息的发送方去存储历史记录\n    appendMessageToChatHistory(receiverSocketId, data);\n  } else {\n    //作为消息的接收方去存储历史记录\n    appendMessageToChatHistory(authorSocketId, data);\n  }\n};\n\nconst appendMessageToChatHistory = (userSocketId, data) => {\n  //找到存储在store中的历史记录 --> directChatHistory:[]\n  const chatHistory = [...store.getState().directChatHistory]; //找到其中某个用户的历史记录 -->userSocketId\n\n  const userChatHistory = chatHistory.find(history => history.socketId === userSocketId); //验证userChatHistory是否存在\n\n  if (userChatHistory) {\n    //如果存在历史记录就将新获取的消息添加进入\n    //创建获取的新会话\n    const newDirectMessage = {\n      isAuthor: data.isAuthor,\n      messageContent: data.messageContent,\n      identity: data.identity\n    }; //创建新的用户历史记录\n\n    const newUserChatHistory = { ...userChatHistory,\n      chatHistory: [...userChatHistory.chatHistory, newDirectMessage]\n    }; //替换掉用户上一次的历史记录\n\n    const newChatHistory = [...chatHistory.filter(history => history.socketId !== userSocketId), newUserChatHistory]; //同步到store中\n\n    store.dispatch(setDirectChatHistory(newChatHistory));\n  } else {\n    //如果历史记录不存在就重新创建该用户的历史记录\n    const newUserChatHistory = {\n      socketId: userSocketId,\n      chatHistory: [{\n        isAuthor: data.isAuthor,\n        messageContent: data.messageContent,\n        identity: data.identity\n      }]\n    };\n    const newChatHistory = [...chatHistory, newUserChatHistory]; //同步更新到store中\n\n    store.dispatch(setDirectChatHistory(newChatHistory));\n  }\n};","map":{"version":3,"sources":["E:/onedrive/桌面/前端学习/webRTC/webRTC/myapp/src/utils/directMessages.js"],"names":["store","setDirectChatHistory","appendNewMessageToChatHistory","data","isAuthor","receiverSocketId","authorSocketId","appendMessageToChatHistory","userSocketId","chatHistory","getState","directChatHistory","userChatHistory","find","history","socketId","newDirectMessage","messageContent","identity","newUserChatHistory","newChatHistory","filter","dispatch"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,gBAAlB;AACA,SAASC,oBAAT,QAAqC,kBAArC;AACA,OAAO,MAAMC,6BAA6B,GAAIC,IAAD,IAAU;AACrD,QAAM;AAAEC,IAAAA,QAAF;AAAYC,IAAAA,gBAAZ;AAA8BC,IAAAA;AAA9B,MAAiDH,IAAvD,CADqD,CAGrD;;AACA,MAAIC,QAAJ,EAAc;AACZ;AACAG,IAAAA,0BAA0B,CAACF,gBAAD,EAAmBF,IAAnB,CAA1B;AACD,GAHD,MAGO;AACL;AACAI,IAAAA,0BAA0B,CAACD,cAAD,EAAiBH,IAAjB,CAA1B;AACD;AACF,CAXM;;AAaP,MAAMI,0BAA0B,GAAG,CAACC,YAAD,EAAeL,IAAf,KAAwB;AACzD;AACA,QAAMM,WAAW,GAAG,CAAC,GAAGT,KAAK,CAACU,QAAN,GAAiBC,iBAArB,CAApB,CAFyD,CAGzD;;AACA,QAAMC,eAAe,GAAGH,WAAW,CAACI,IAAZ,CACrBC,OAAD,IAAaA,OAAO,CAACC,QAAR,KAAqBP,YADZ,CAAxB,CAJyD,CAQzD;;AACA,MAAII,eAAJ,EAAqB;AACnB;AACA;AACA,UAAMI,gBAAgB,GAAG;AACvBZ,MAAAA,QAAQ,EAAED,IAAI,CAACC,QADQ;AAEvBa,MAAAA,cAAc,EAAEd,IAAI,CAACc,cAFE;AAGvBC,MAAAA,QAAQ,EAAEf,IAAI,CAACe;AAHQ,KAAzB,CAHmB,CAQnB;;AACA,UAAMC,kBAAkB,GAAG,EACzB,GAAGP,eADsB;AAEzBH,MAAAA,WAAW,EAAE,CAAC,GAAGG,eAAe,CAACH,WAApB,EAAiCO,gBAAjC;AAFY,KAA3B,CATmB,CAcnB;;AACA,UAAMI,cAAc,GAAG,CACrB,GAAGX,WAAW,CAACY,MAAZ,CAAoBP,OAAD,IAAaA,OAAO,CAACC,QAAR,KAAqBP,YAArD,CADkB,EAErBW,kBAFqB,CAAvB,CAfmB,CAmBnB;;AACAnB,IAAAA,KAAK,CAACsB,QAAN,CAAerB,oBAAoB,CAACmB,cAAD,CAAnC;AACD,GArBD,MAqBO;AACL;AACA,UAAMD,kBAAkB,GAAG;AACzBJ,MAAAA,QAAQ,EAAEP,YADe;AAEzBC,MAAAA,WAAW,EAAE,CACX;AACEL,QAAAA,QAAQ,EAAED,IAAI,CAACC,QADjB;AAEEa,QAAAA,cAAc,EAAEd,IAAI,CAACc,cAFvB;AAGEC,QAAAA,QAAQ,EAAEf,IAAI,CAACe;AAHjB,OADW;AAFY,KAA3B;AAUA,UAAME,cAAc,GAAG,CAAC,GAAGX,WAAJ,EAAiBU,kBAAjB,CAAvB,CAZK,CAaL;;AACAnB,IAAAA,KAAK,CAACsB,QAAN,CAAerB,oBAAoB,CAACmB,cAAD,CAAnC;AACD;AACF,CA9CD","sourcesContent":["import store from '../store/store';\nimport { setDirectChatHistory } from '../store/actions';\nexport const appendNewMessageToChatHistory = (data) => {\n  const { isAuthor, receiverSocketId, authorSocketId } = data;\n\n  //根据isAuhtor的值判断历史记录应该存储在那个用户（接收方/发送方）的历史记录里面\n  if (isAuthor) {\n    //作为消息的发送方去存储历史记录\n    appendMessageToChatHistory(receiverSocketId, data);\n  } else {\n    //作为消息的接收方去存储历史记录\n    appendMessageToChatHistory(authorSocketId, data);\n  }\n};\n\nconst appendMessageToChatHistory = (userSocketId, data) => {\n  //找到存储在store中的历史记录 --> directChatHistory:[]\n  const chatHistory = [...store.getState().directChatHistory];\n  //找到其中某个用户的历史记录 -->userSocketId\n  const userChatHistory = chatHistory.find(\n    (history) => history.socketId === userSocketId\n  );\n\n  //验证userChatHistory是否存在\n  if (userChatHistory) {\n    //如果存在历史记录就将新获取的消息添加进入\n    //创建获取的新会话\n    const newDirectMessage = {\n      isAuthor: data.isAuthor,\n      messageContent: data.messageContent,\n      identity: data.identity,\n    };\n    //创建新的用户历史记录\n    const newUserChatHistory = {\n      ...userChatHistory,\n      chatHistory: [...userChatHistory.chatHistory, newDirectMessage],\n    };\n\n    //替换掉用户上一次的历史记录\n    const newChatHistory = [\n      ...chatHistory.filter((history) => history.socketId !== userSocketId),\n      newUserChatHistory,\n    ];\n    //同步到store中\n    store.dispatch(setDirectChatHistory(newChatHistory));\n  } else {\n    //如果历史记录不存在就重新创建该用户的历史记录\n    const newUserChatHistory = {\n      socketId: userSocketId,\n      chatHistory: [\n        {\n          isAuthor: data.isAuthor,\n          messageContent: data.messageContent,\n          identity: data.identity,\n        },\n      ],\n    };\n    const newChatHistory = [...chatHistory, newUserChatHistory];\n    //同步更新到store中\n    store.dispatch(setDirectChatHistory(newChatHistory));\n  }\n};\n"]},"metadata":{},"sourceType":"module"}